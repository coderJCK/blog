(window.webpackJsonp=window.webpackJsonp||[]).push([[38],{352:function(o,e,r){"use strict";r.r(e);var k=r(4),l=Object(k.a)({},(function(){var o=this,e=o._self._c;return e("ContentSlotsDistributor",{attrs:{"slot-key":o.$parent.slotKey}},[e("p",[o._v("代码库地址")]),o._v(" "),e("p",[o._v("在前端对透视表数据导出为excel进行下载，透视表数据最高可到百万个单元格以上，因此在主线程内对大量数据进行excel导出时不可避免的会对主线程进行阻塞，而主线程阻塞对于用户感知来说就是页面卡顿；\n显然，这种业务是一种典型的CPU密集型任务，如果可以放在主线程以外的线程进行执行那么就可以有效的避免对主线程的阻塞了；Worker 正是为此而生，通过创建worker来新建线程，就可以有效的分担主线程的压力；\nWorker 的通信")]),o._v(" "),e("p",[o._v("主线程和Worker实例之间都是通过postMessage方法来向对方发送消息，而又通过onmessage方法来注册各自的消息接收处理事件。")]),o._v(" "),e("p",[o._v("如何在 Worker 中实现 excel 的导出\n前端有个著名的excel导出库——sheetjs，幸运的是这个库的大部分方法都能在worker中直接进行使用，因此基本上可以参照正常的导出逻辑搬到worker文件中即可。这里不会探讨sheetjs的具体使用细节（因为这种API使用文档网上太多了，就不赘述了），假设此时可以获取到对透视表表格本身的单元格二维数组（即以行为主导，每行里面的元素就是列），那么根据二维数组就能生成一个WorkBook对象。")]),o._v(" "),e("p",[o._v("而有了WorkBook对象，正常来说基于XLSX.writeFile()等方法就能直接进行excel下载操作了；一般现在的文件下载操作都是通过a标签来实现的，而worker本身是限制DOM访问的，因此不能通过上述方法在worker内实现下载操作，所以应该将下载操作放在主线程，而将必要的数据传送到主线程。\n那么问题来了，应该选择传送什么样的数据到主线程？")]),o._v(" "),e("p",[o._v("思路一：传送 WorkBook 对象\n从直觉上来说直接把WorkBook对象(包括处理完的数据)传送到主线程，数据量如果太大，那么通信成本也很大那么就跟不用webWorker的时间耗费是一样，然后让主线程继续接着XLSX.writeFile()方法的路子不就好了。但事实证明，这种思路有两个弊端：")]),o._v(" "),e("ol",[e("li",[o._v("线程间的通信成本：WorkBook对象本质上是一个包含大量数据的对象结构（包含单元格数据和单元格设置等），而线程间的通信成本会随着数据量加大而陡增（结构化克隆，序列化，反序列化等等）；当数据量较大时，主线程在接收来自Worker的消息依然会造成明显的阻塞。")]),o._v(" "),e("li",[o._v("从WorkBook对象到下载的成本：由于WorkBook对象本身不能直接进行下载，因此XLSX.writeFile()这类方法内部都需要先将WorkBook对象转为Blob/File对象，然后通过URL.createObjectURL()来创建一个可访问的Blob URL；但实际上将WorkBook对象转为Blob/File对象也是一个挺耗时的过程。\n这里可以看一个具体导出过程的用时统计即可看出上述弊端：")])]),o._v(" "),e("p",[o._v("思路二：传送 Blob URL\n幸运的是，worker内可以使用URL.createObjectURL()方法[1]，且创建的Blob URL可以被主线程访问\n到此，剩下的问题就只有一个了——那就是如何将WorkBook对象转为Blob对象；事实上，sheetjs本身就提供了将WorkBook对象转为二进制数据（Uint8Array）的API——XLSX.write()，所以这事就很简单了。")]),o._v(" "),e("p",[o._v("至此，只需要将Blob URL传送到主线程即可完成最后的下载步骤；显然，传送一个URL字符串的通信成本几乎为0，这样就可以把excel导出下载任务的绝大多数运算控制在worker内部了，最小可能的对主线程进行占用。")])])}),[],!1,null,null,null);e.default=l.exports}}]);